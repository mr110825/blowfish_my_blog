
[{"content":"私は普段、Githubのプライベートリポジトリにメモやアイデアを書き溜めています。 リポジトリには、清書したメモなどを保管。Issuesに一時メモや作業メモをまとめています。 （IssuesについてはZennのスクラップと同じような感じで利用しています。） しかし、Issuesの作業メモなどは書き溜めた後、コピー\u0026amp;ペーストするような方法ばかりで、 効率的に活用できていませんでした。\nこの問題を解決するため、Issuesをmarkdownファイルとしてダウンロードして、ローカル環境で管理することを決めました。この記事では、GitHub CLIを使ってGitHubのIssuesをmarkdownファイルとしてダウンロードする方法を紹介します。\n対象読者：\nGithub CLIの基本的な使い方を知っている方 ドキュメント作成や記事執筆の素材としてIssuesを活用したい方 :::message Isseusを取得する対象としてはプライベートリポジトリかつ、Githubの無料プランを利用しているユーザーを想定しております。\nパブリックリポジトリまたは有料プランユーザーの場合は、Github Wiki機能など互換性のある機能があるため、そちらを利用するほうが手順も簡単で、効率的にドキュメント運用できると考えられます。 :::\n前提条件\nOS: Linux（Ubuntu）環境（WSL2含む） 権限: GitHubにて対象リポジトリへのアクセス権限を保有している サンプル: 当記事ではサンプルリポジトリ（mr110825/github-issues-to-markdown）を例として説明します 環境セットアップ # GitHub CLIのインストール # # インストール状況の確認 gh --version # GitHub CLIのインストール（必要な場合） sudo apt install gh GitHub CLIへのログイン # # ログイン状況の確認 gh auth status # GitHub CLIへログイン実行 gh auth login :::message GitHub CLIへのログイン手順の詳細については、以下の記事をご参照ください。\n【Git のセットアップ】GitHub CLI を使って GitHub に接続する GitHub CLIのクイックスタート :::\nリポジトリのIssues一覧確認 # gh issue list --repo \u0026lt;OWNER/REPO\u0026gt; 実行例 # # サンプルのリポジトリ（mr110825/github-issues-to-markdown）のIssueを対象とする gh issue list --repo mr110825/github-issues-to-markdown 出力例 # ID TITLE LABELS UPDATED #1 サンプル用のIssues about 1 hour ago Issueの取得 # gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments \u0026gt; \u0026lt;FILENAME\u0026gt;.md 実行例 # # サンプルのリポジトリ（mr110825/github-issues-to-markdown）のIssues#1を「test1.md」として取得する gh issue view 1 --repo mr110825/github-issues-to-markdown --comments \u0026gt; test1.md 出力例 # author:\tmr110825 association:\towner edited:\ttrue status:\tnone -- 記事を投稿するので構成をまとめる -- author:\tmr110825 association:\towner edited:\ttrue status:\tnone -- 必要な手順 - [x] 文章企画を構成 - [x] サンプルのリポジトリを作成 - [x] 記事作成 - [x] 記事投稿 -- :::message この方法は最もシンプルですが、出力されるファイルには多くのメタデータが含まれており、実際の内容を読みにくく感じました。特に、複数のコメントがある場合、どのコメントがどのタイミングで投稿されたのかが分かりにくいという問題があります。 :::\nIssueの取得（不要なプロパティを除外してISO形式でコメントのみを取得） # gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments --json comments --template \u0026#39;{{range .comments}}## コメント ({{.createdAt}}) {{.body}} --- {{end}}\u0026#39; \u0026gt; \u0026lt;FILENAME\u0026gt;.md 実行例 # # サンプルのリポジトリ（mr110825/github-issues-to-markdown）のIssues#1を「test2.md」として取得する gh issue view 1 --repo mr110825/github-issues-to-markdown --comments --json comments --template \u0026#39;{{range .comments}}## コメント ({{.createdAt}}) {{.body}} --- {{end}}\u0026#39; \u0026gt; test2.md 出力例 # ## コメント (2025-06-28T12:24:28Z) 記事を投稿するので構成をまとめる --- ## コメント (2025-06-28T12:25:50Z) 必要な手順 - [x] 文章企画を構成 - [x] サンプルのリポジトリを作成 - [x] 記事作成 - [x] 記事投稿 --- :::message この方法では、メタデータが除去され、コメントの内容と投稿日時が明確に表示されるようになりました。しかし、ISO形式の日時表記は読みづらいため、さらに改善が必要です。 :::\nIssueの取得（jqコマンドで日時フォーマットを日本語表記に変換） # gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments --json comments | jq -r \u0026#39;.comments[] | \u0026#34;## コメント (\u0026#34; + (.createdAt | strptime(\u0026#34;%Y-%m-%dT%H:%M:%SZ\u0026#34;) | strftime(\u0026#34;%Y年%m月%d日 %H時%M分\u0026#34;)) + \u0026#34;)\\n\\n\u0026#34; + .body + \u0026#34;\\n\\n---\\n\u0026#34;\u0026#39; \u0026gt; \u0026lt;FILENAME\u0026gt;.md # jqコマンドのインストール（必要な場合） sudo apt install jq 実行例 # # サンプルのリポジトリ（mr110825/github-issues-to-markdown）のIssues#1を「test3.md」として取得する gh issue view 1 --repo mr110825/github-issues-to-markdown --comments --json comments | jq -r \u0026#39;.comments[] | \u0026#34;## コメント (\u0026#34; + (.createdAt | strptime(\u0026#34;%Y-%m-%dT%H:%M:%SZ\u0026#34;) | strftime(\u0026#34;%Y年%m月%d日 %H時%M分\u0026#34;)) + \u0026#34;)\\n\\n\u0026#34; + .body + \u0026#34;\\n\\n---\\n\u0026#34;\u0026#39; \u0026gt; test3.md 出力例 # ## コメント (2025年06月28日 12時24分) 記事を投稿するので構成をまとめる --- ## コメント (2025年06月28日 12時25分) 必要な手順 - [x] 文章企画を構成 - [x] サンプルのリポジトリを作成 - [x] 記事作成 - [x] 記事投稿 --- :::message この方法が最も実用的です。日本語表記により、日時が直感的に理解でき、ドキュメントとして保存した際にも読みやすくなります。ただし、jqコマンドのインストールが必要になるため、環境によっては追加のセットアップが必要になります。 :::\nコマンドのまとめ # # Issues一覧確認 gh issue list --repo \u0026lt;OWNER/REPO\u0026gt; # Issueの取得 gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments \u0026gt; \u0026lt;FILENAME\u0026gt;.md # Issueの取得（不要なプロパティを除外してISO形式でコメントのみを取得） gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments --json comments --template \u0026#39;{{range .comments}}## コメント ({{.createdAt}}) {{.body}} --- {{end}}\u0026#39; \u0026gt; \u0026lt;FILENAME\u0026gt;.md # Issueの取得（jqコマンドで日時フォーマットを日本語表記に変換） gh issue view \u0026lt;ISSUE_NUMBER\u0026gt; --repo \u0026lt;OWNER/REPO\u0026gt; --comments --json comments | jq -r \u0026#39;.comments[] | \u0026#34;## コメント (\u0026#34; + (.createdAt | strptime(\u0026#34;%Y-%m-%dT%H:%M:%SZ\u0026#34;) | strftime(\u0026#34;%Y年%m月%d日 %H時%M分\u0026#34;)) + \u0026#34;)\\n\\n\u0026#34; + .body + \u0026#34;\\n\\n---\\n\u0026#34;\u0026#39; \u0026gt; \u0026lt;FILENAME\u0026gt;.md まとめ # Github CLIを使用してIssuesをMarkdownファイルとしてダウンロードする方法を紹介しました。特に、jqコマンドを使用した日本語表記でのダウンロード方法が、実用的で読みやすい結果を得られると感じています。\nこの方法により、オフライン環境でもIssuesの内容を参照でき、ドキュメント作成や記事執筆の素材としても活用できるようになります。実際に使用してみて、いくつかの改善点も見つかりましたが、基本的なニーズを満たすには十分な方法だと思います。\n","date":"3 8月 2025","externalUrl":null,"permalink":"/posts/how_to_download_github_issues/","section":"Posts","summary":"","title":"Github CLIでIssuesをMarkdownファイルとしてダウンロードする方法","type":"posts"},{"content":"","date":"3 8月 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"3 8月 2025","externalUrl":null,"permalink":"/","section":"技術的デジャブ回避メモ帳","summary":"","title":"技術的デジャブ回避メモ帳","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]